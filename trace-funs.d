BEGIN
{
  depth = 0;
}

pid$target:::entry
{
  /* set function depth */
  this->fdepth = ++fdepth[probefunc];
  depth += 1;
  
  /* set start details */
  self->start[probefunc,this->fdepth] = timestamp;
  self->vstart[probefunc,this->fdepth] = vtimestamp;
  
  /* count occurances */
  @Counts[probefunc] = count();
  
  /* print optional fields */
  printf("%8d ",vtimestamp/1000);
  printf("      . ");
  printf("     . ");
  printf("%*s",depth,"");
  
  /* print main data */
  printf("-> ");
  printf("%s(0x%X, 0x%X, 0x%X)\t\t\n",probefunc,arg0,arg1,arg2);
 }

/*
 * Print return data
 */
pid$target:::return
/self->start[probefunc,fdepth[probefunc]]/
{
  /* fetch function depth */
  this->fdepth = fdepth[probefunc];
  
  /* calculate elapsed time */
  this->elapsed = timestamp - self->start[probefunc,this->fdepth];
  self->start[probefunc,this->fdepth] = 0;
  this->cpu = vtimestamp - self->vstart[probefunc,this->fdepth];
  self->vstart[probefunc,this->fdepth] = 0;
  
  /* print optional fields */
  printf("%8d ",vtimestamp/1000);
  printf("%7d ",this->elapsed/1000);
  printf("%6d ",this->cpu/1000);
  printf("%*s",depth,"");
  
  /* print main data */
  printf("<- ");
  printf("%s = %d\n",probefunc,(int)arg0);
  depth -= 1;
  fdepth[probefunc]--;
}

 /* reset indent depth */
 /* SOLARIS: profile:::tick-1sec */
 profile:::tick-10Hz
 {
	/* 
	 * some probes generated by the pid provider have entries
 	 * but not returns. this is a klude to fix that problem. this
	 * also explains fdepth[probefunc] rather than a single depth.
	 */
	depth = 0;
 }

 /* print counts */
 dtrace:::END
 {
	printf("\n%-49s %16s\n","CALL","COUNT");
	printa("%-49s %@16d\n",@Counts);
 }

